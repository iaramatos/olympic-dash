# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17q44q-6s23ZmLCIt7eRwlq7CBSmN_jz5
"""



import pandas as pd
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# Carrega os dados
df = pd.read_csv('Summer_olympic_Medals.csv')
df['Country_Name'] = df['Country_Name'].replace('United States', 'United States of America')

# Filtro de ano
df = df[(df['Year'] >= 1992) & (df['Year'] <= 2020)]
df['Total_Medals'] = df['Gold'] + df['Silver'] + df['Bronze']

# Inicia app Dash
app = dash.Dash(__name__)

# Layout
app.layout = html.Div([
    html.H1("Dashboard - Medalhas Olímpicas (1992-2020)", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o tipo de medalha:"),
        dcc.Dropdown(
            id='medal-type',
            options=[
                {'label': 'Todos', 'value': 'Total'},
                {'label': 'Ouro', 'value': 'Gold'},
                {'label': 'Prata', 'value': 'Silver'},
                {'label': 'Bronze', 'value': 'Bronze'}
            ],
            value='Total'
        )
    ], style={'width': '30%', 'margin': '20px'}),

    html.Div([
        dcc.Graph(id='choropleth-map', style={'height': '50vh'}),
    ]),

    html.Div([
        html.Div([
            dcc.Graph(id='area-chart')
        ], style={'width': '50%'}),

        html.Div([
            html.Label("Selecione o ano (País sede):"),
            dcc.Dropdown(
                id='year-filter',
                options=[{'label': str(year), 'value': year} for year in sorted(df['Year'].unique())],
                value=2020
            ),
            dcc.Graph(id='bar-chart')
        ], style={'width': '50%'})
    ], style={'display': 'flex'}),

    html.Div([
        html.Label("Selecione o país:"),
        dcc.Dropdown(
            id='country-filter',
            options=[{'label': country, 'value': country} for country in sorted(df['Country_Name'].unique())],
            value='United States of America'
        ),
        dcc.Graph(id='pie-chart')
    ])
])

# Callbacks

@app.callback(
    Output('choropleth-map', 'figure'),
    Input('medal-type', 'value')
)
def update_map(medal_type):
    if medal_type == 'Total':
        df_plot = df.groupby('Country_Name')['Total_Medals'].sum().reset_index()
        color = 'Total_Medals'
    else:
        df_plot = df.groupby('Country_Name')[medal_type].sum().reset_index()
        color = medal_type

    fig = px.choropleth(df_plot,
                        locations='Country_Name',
                        locationmode='country names',
                        color=color,
                        hover_name='Country_Name',
                        color_continuous_scale=px.colors.sequential.YlOrRd,
                        title=f'Total de Medalhas - {medal_type}')
    return fig

@app.callback(
    Output('area-chart', 'figure'),
    Input('medal-type', 'value')
)
def update_area_chart(medal_type):
    if medal_type == 'Total':
        data = df.copy()
        y_col = 'Total_Medals'
    else:
        data = df.copy()
        y_col = medal_type

    top_10 = data.groupby('Country_Name')[y_col].sum().nlargest(10).index
    filtered = data[data['Country_Name'].isin(top_10)]
    fig = px.area(filtered, x='Year', y=y_col, color='Country_Name',
                  title=f'Top 10 Países - Medalhas {medal_type}')
    return fig

@app.callback(
    Output('bar-chart', 'figure'),
    [Input('medal-type', 'value'), Input('year-filter', 'value')]
)
def update_bar_chart(medal_type, selected_year):
    df_year = df[df['Year'] == selected_year]
    if medal_type == 'Total':
        df_year['Total_Medals'] = df_year['Gold'] + df_year['Silver'] + df_year['Bronze']
        y_col = 'Total_Medals'
    else:
        y_col = medal_type

    top = df_year.groupby('Country_Name')[y_col].sum().nlargest(10).reset_index()

    fig = px.bar(top, x='Country_Name', y=y_col,
                 color_discrete_sequence=['gold' if medal_type == 'Gold' else 'silver' if medal_type == 'Silver' else 'brown'],
                 title=f'Top 10 Países ({selected_year}) - Medalhas {medal_type}')
    return fig

@app.callback(
    Output('pie-chart', 'figure'),
    Input('country-filter', 'value')
)
def update_pie_chart(selected_country):
    df_country = df[df['Country_Name'] == selected_country]
    values = [df_country['Gold'].sum(), df_country['Silver'].sum(), df_country['Bronze'].sum()]
    labels = ['Ouro', 'Prata', 'Bronze']
    fig = px.pie(values=values, names=labels, title=f'Medalhas por tipo - {selected_country}')
    return fig

# ADICIONE ESTA LINHA:
server = app.server

# A seção abaixo é apenas para execução local e não afeta o Gunicorn
if __name__ == '__main__':
    app.run_server(debug=True) # Ou debug=False para produção local
